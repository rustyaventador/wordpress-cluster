---
type: install
version: '1.1'
name: WordPress Cluster
categories:
  - apps/clusters
  - apps/content-management
description: WordPress Cluster package provides integrated autoscaling and high availability for development and production environments. Clustered topology ensures effective handling of heavy workload.
logo: https://raw.githubusercontent.com/jelastic-jps/wordpress-cluster/master/images/wp-cluster.png
baseUrl: https://raw.githubusercontent.com/jelastic-jps/wordpress-cluster/master


settings:
  fields:
  - name: wp_title
    caption: WP Title
    type: string
    default: HelloWorld
    required: 'true'
    regex: "^[\\w-.]*$"
    regexText: Incorrect WP Title.
    
nodes:
  - nodeType: mysql
    tag: 8.0.15
    count: 2
    cloudlets: 8
    nodeGroup: sqldb
    displayName: Database
    env:
      ON_ENV_INSTALL: ''

  - nodeType: nginxphp-dockerized
    tag: 1.14.2-php-7.3.0
    count: 2
    cloudlets: 8
    nodeGroup: cp
    displayName: AppServer
    links: sqldb:DB
    volumes:
      - "/var/www/webroot/ROOT"
      - "/var/ftp/webroot/ROOT"
    volumeMounts:
      "/var/www/webroot/ROOT":
        readOnly: false
        sourcePath: "/data"
        sourceNodeGroup: storage
      "/var/ftp/webroot/ROOT":
        readOnly: false
        sourcePath: "/data"
        sourceNodeGroup: storage

  - nodeType: storage
    cloudlets: 8
    nodeGroup: storage
    displayName: Storage

  - nodeType: nginx-dockerized
    tag: 1.14.2
    count: 1
    cloudlets: 8
    nodeGroup: bl
    displayName: Load balancer

onBeforeInit: |  
  var resp = jelastic.billing.account.GetQuotas(appid, session, 'environment.jelasticssl.enabled');
  if (resp.result != 0 ) return resp;  
  return  { result: 0, ssl: !!resp.array[0].value };

onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    cmd [${@i.id}]: sudo service nginx reload
    setNodeDisplayName [${@i.id}]: AppServer

onAfterScaleOut[nodeGroup:bl]:
  forEach(event.response.nodes):
    setNodeDisplayName [${@i.id}]: Load balancer

globals:
  DB_USER: jelastic-${fn.random}
  DB_PASS: "${fn.password(20)}"
  ADMIN_PASSWD: "${fn.password(20)}"

onInstall:
  - log: Auto Scaling Triggers
  - script: "${baseUrl}/scripts/addTriggers.js"

  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer

  - log: DB Multi-Master Cluster Setup
  - installJps:
      jps: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/ms-mm-configuration.jps
      settings:
        path: "https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master"
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
        scheme: master
        custom_conf: "${baseUrl}/configs/mysql/mysql.cnf"
      nodeGroup: sqldb

  - log: CP Layer Setup
  - forEach(nodes.cp):
      setupNode:
        nodeId: "${@i.id}"

  - log: Download and Unpack latest WordPress release
  - cmd[storage]: wget -qO- 'https://wordpress.org/latest.tar.gz' | tar xz -C /tmp && mv /tmp/wordpress/* /data

  - log: Setup WordPress
  - installJps:
      jps: "${baseUrl}/scripts/setup-wordpress.jps"
      settings:
        db_host: DB_1
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
        admin_passwd: "${globals.ADMIN_PASSWD}"
        wp_title: "${settings.wp_title}"

  - log: 'Install HyperDB - is an advanced database class that supports replication, failover, load balancing and partitioning.'
  - cmd[storage]: |-
      wget ${baseUrl}/configs/wordpress/db-config.php -O /data/db-config.php
      wget ${baseUrl}/configs/wordpress/db.php -O /data/wp-content/db.php

  - log: Additional configuration for WordPress.
  - cmd[storage]: |-
      wget ${baseUrl}/configs/wordpress/wp-jelastic.php -O /data/wp-jelastic.php
      sed -i "s/.*'wp-settings.php';.*/require_once ABSPATH . 'wp-jelastic.php';\n&/" /data/wp-config.php

  - log: Plugins install
  - installJps:
      jps: "${baseUrl}/scripts/setup-plugins.jps"
      settings:
        server_webroot: /var/www/webroot/ROOT

  - log: Set permission
  - cmd[storage]: chown 700:700 -Rh /data/

actions:
  setupNode:
  - cmd[${this.nodeId}]: |-
      wget ${baseUrl}/configs/nginx/nginx.conf -O /etc/nginx/nginx.conf
      wget ${baseUrl}/configs/nginx/default.conf -O /etc/nginx/conf.d/default.conf
      wget ${baseUrl}/configs/php/wp-upload.ini -O /etc/php.d/wp-upload.ini
      wget ${baseUrl}/configs/php/opcache.ini -O /etc/php.d/opcache.ini
      sudo service nginx restart

success: /text/success.md
